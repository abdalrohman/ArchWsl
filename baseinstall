#!/bin/bash

#-------------------------------------------------------------------------
#                          ████                               █████     
#                         ░░███                              ░░███      
#  █████ ███ █████  █████  ░███   ██████   ████████   ██████  ░███████  
# ░░███ ░███░░███  ███░░   ░███  ░░░░░███ ░░███░░███ ███░░███ ░███░░███ 
#  ░███ ░███ ░███ ░░█████  ░███   ███████  ░███ ░░░ ░███ ░░░  ░███ ░███ 
#  ░░███████████   ░░░░███ ░███  ███░░███  ░███     ░███  ███ ░███ ░███ 
#   ░░████░████    ██████  █████░░████████ █████    ░░██████  ████ █████
#    ░░░░ ░░░░    ░░░░░░  ░░░░░  ░░░░░░░░ ░░░░░      ░░░░░░  ░░░░ ░░░░░ 
#                       BUILD ARCH LINUX FOR WSL
#Based on basetrap from manjaro tools project.
#-------------------------------------------------------------------------

# shellcheck disable=SC2174
# shellcheck disable=SC1090


shopt -s extglob

PATH_DIR=$(dirname "${BASH_SOURCE[0]}")
[[ -r ${PATH_DIR}/util.sh ]] && source "${PATH_DIR}/util.sh"

newroot=/mnt

hostcache=false

usage() {
    echo "usage: ${0##*/} [options] root [packages...]"
    echo " -C config      Use an alternate config file for pacman"
    echo " -c             Use the package cache on the host, rather than the target"
    echo " -d             Allow installation to a non-mountpoint directory"
    echo " -i             Avoid auto-confirmation of package selections"
    echo " -h             Print this help message"
    echo ''
    exit "${1}"
}

orig_argv=("$@")

opts=':C:cdGiM'

while getopts ${opts} arg; do
    case "${arg}" in
        c) hostcache=true ;;
        C) pacman_config=$OPTARG ;;
        d) directory=true ;;
        i) interactive=true ;;
        :) echo "invalid argument ${arg}:$OPTARG"; usage 1;;
        ?) usage 0 ;;
    esac
done
shift $(( OPTIND - 1 ))

check_root "$0" "${orig_argv[@]}"

chroot_mount() {
    #info "mount: [%s]" "$2"
    mount "$@" && CHROOT_ACTIVE_MOUNTS=("$2" "${CHROOT_ACTIVE_MOUNTS[@]}")
}

chroot_mount_conditional() {
    local cond=$1; shift
    if eval "$cond"; then
        chroot_mount "$@"
    fi
}

chroot_api_mount() {
    CHROOT_ACTIVE_MOUNTS=()
    [[ $(trap -p EXIT) ]] && die 'Error! Attempting to overwrite existing EXIT trap'
    trap 'chroot_api_umount' EXIT

    chroot_mount_conditional "! mountpoint -q '$1'" "$1" "$1" --bind &&
    chroot_mount proc "$1/proc" -t proc -o nosuid,noexec,nodev &&
    chroot_mount sys "$1/sys" -t sysfs -o nosuid,noexec,nodev,ro &&
    chroot_mount udev "$1/dev" -t devtmpfs -o mode=0755,nosuid &&
    chroot_mount devpts "$1/dev/pts" -t devpts -o mode=0620,gid=5,nosuid,noexec &&
    chroot_mount shm "$1/dev/shm" -t tmpfs -o mode=1777,nosuid,nodev &&
    chroot_mount run "$1/run" -t tmpfs -o nosuid,nodev,mode=0755 &&
    chroot_mount tmp "$1/tmp" -t tmpfs -o mode=1777,strictatime,nodev,nosuid
}

chroot_api_umount() {
    #info "umount: [%s]" "${CHROOT_ACTIVE_MOUNTS[@]}"
    umount "${CHROOT_ACTIVE_MOUNTS[@]}"
    unset CHROOT_ACTIVE_MOUNTS
}

create_min_fs(){
    msg "Creating install root at %s" "$1"
    mkdir -m 0755 -p "${1}"/var/{cache/pacman/pkg,lib/pacman,log} "${1}"/{dev,run,etc}
    mkdir -m 1777 -p "${1}"/tmp
    mkdir -m 0555 -p "${1}"/{sys,proc}
}

(( $# )) || die "No root directory specified"
newroot=$1; shift
pacman_args=("${@:-base}")

${hostcache} && pacman_args+=(--cachedir="$newroot/var/cache/pacman/pkg")

${interactive} && pacman_args+=(--noconfirm)

[[ -n $pacman_config ]] && pacman_args+=(--config="$pacman_config")

[[ -d $newroot ]] || die "%s is not a directory" "$newroot"

if ! mountpoint -q "$newroot" && ! ${directory}; then
    die '%s is not a mountpoint!' "$newroot"
fi

# create obligatory directories
create_min_fs "$newroot"

# mount API filesystems
chroot_api_mount "$newroot" || die "failed to setup API filesystems in new root"

msg 'Installing packages to %s' "$newroot"
if ! pacman -r "$newroot" -Sy "${pacman_args[@]}"; then
    die 'Failed to install packages to new root'
fi